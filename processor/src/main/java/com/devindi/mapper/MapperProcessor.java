package com.devindi.mapper;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.ElementFilter;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.*;

@SupportedSourceVersion(SourceVersion.RELEASE_7)
@SupportedAnnotationTypes({
        "com.devindi.mapper.Mapper"
})
public class MapperProcessor extends AbstractProcessor {

    private ProcessingEnvironment processingEnv;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        this.processingEnv = processingEnv;
        super.init(processingEnv);
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(Mapper.class)) {
            ElementKind kind = annotatedElement.getKind();
            if (kind.equals(ElementKind.INTERFACE)) {
                createInterfaceImplementation((TypeElement) annotatedElement);
            } else {
                processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, "Mapper supports interfaces only", annotatedElement);
                return false;
            }
        }
        return false;
    }

    private void createInterfaceImplementation(TypeElement interfaceElement) {
        TypeSpec.Builder implBuilder = TypeSpec.classBuilder(interfaceElement.getSimpleName() + "Impl")
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(ClassName.get(interfaceElement));

        for (Element element : interfaceElement.getEnclosedElements()) {
            if (element.getKind().equals(ElementKind.METHOD)) {
                MethodSpec methodSpec = generateMappingMethod((ExecutableElement) element);
                if (methodSpec != null) implBuilder.addMethod(methodSpec);
            }
        }

        TypeSpec implSpec = implBuilder.build();
        final JavaFile javaFile = JavaFile.builder(interfaceElement.getEnclosingElement().toString(), implSpec)
                .addFileComment("Generated by Mapping processor, do not modify")
                .build();

        try {
            final JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(
                    javaFile.packageName + "." + implSpec.name, interfaceElement);
            try (final Writer writer = new BufferedWriter(sourceFile.openWriter())) {
                javaFile.writeTo(writer);
            }
        } catch (IOException e) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.getMessage(), interfaceElement);
        }
    }

    private MethodSpec generateMappingMethod(ExecutableElement methodElement) {
        List<? extends VariableElement> parameters = methodElement.getParameters();
        if (parameters.size() != 1) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, "Mapper method should have only 1 parameter. Method will be ignored", methodElement);
            return null;
        }
        String argumentTypeString = parameters.get(0).asType().toString();

        TypeMirror returnType = methodElement.getReturnType();
        if (returnType.getKind().equals(TypeKind.VOID)) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, "Mapper method should return value. Method will be ignored", methodElement);
            return null;
        }

        String returnTypeString = returnType.toString();

        String methodName = methodElement.getSimpleName().toString();

        //let's map getters to constructor arguments
        Map<String, ExecutableElement> argumentGetters = new HashMap<>();

        List<? extends Element> argumentEnclosedElements = processingEnv.getElementUtils().getTypeElement(argumentTypeString).getEnclosedElements();
        List<ExecutableElement> argumentTypeMethods = ElementFilter.methodsIn(argumentEnclosedElements);
        for (ExecutableElement argumentTypeMethod : argumentTypeMethods) {
            String argumentMethodName = argumentTypeMethod.getSimpleName().toString();
            if (argumentMethodName.startsWith("get") && argumentTypeMethod.getParameters().size() == 0) {
                argumentGetters.put(argumentMethodName.substring(3).toLowerCase(), argumentTypeMethod);
            }
        }

        List<? extends Element> returnEnclosedElements = processingEnv.getElementUtils().getTypeElement(returnTypeString).getEnclosedElements();
        List<ExecutableElement> returnTypeConstructors = ElementFilter.constructorsIn(returnEnclosedElements);
        if (returnTypeConstructors.size() != 1) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, "Mapper target should have only 1 constructor. Method will be ignored", methodElement);
            return null;
        }
        ExecutableElement constructorElement = returnTypeConstructors.get(0);

        List<? extends VariableElement> constructorParameters = constructorElement.getParameters();

        if (constructorParameters.size() != argumentGetters.size()) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.MANDATORY_WARNING, "Target constructor have different arguments count", methodElement);
        }

        //generate method code
        MethodSpec.Builder methodBuilder = MethodSpec.overriding(methodElement);
        StringBuilder statementBuilder = new StringBuilder();
        statementBuilder
                .append("return new ")
                .append(returnTypeString)
                .append("(");

        String separator = "";
        for (VariableElement constructorParameter : constructorParameters) {
            String parameterName = constructorParameter.getSimpleName().toString().toLowerCase();
            ExecutableElement getter = argumentGetters.get(parameterName);
            if (!constructorParameter.asType().equals(getter.getReturnType())) {
                //getter and constructor parameter have different types
                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Getter return type and constructor argument type are different", methodElement);
            }

            statementBuilder
                    .append(separator)
                    .append('\n')
                    .append(methodElement.getParameters().get(0).getSimpleName())
                    .append(".")
                    .append(getter.getSimpleName())
                    .append("()");
            separator = ",";
        }

        statementBuilder
                .append('\n')
                .append(")");
        methodBuilder.addStatement(statementBuilder.toString());

        return methodBuilder.build();
    }
}
